frame(curr,alloc,maxres,running,safe,count,i,j,exec,r,p,k,flag,flag1,flag2,avl,maxclaim,totalsafenum,fail,order) and
(
	while(true){
		int curr[5,4],maxclaim[5,4],avl[4],alloc[5] <==[0,0,0,0,0],maxres[4]<==[9,5,9,8],running[5] and skip;
		int safe<==0,count<==0,i<==0,j,exec,r<==4,p<==5,k<==1,flag<==0,flag1<==0,flag2<==0,fail<==0,totalsafenum<==0,order[5] and skip;//totalsafenum用来记录已经成功分配的进程的个数
		maxclaim:=[[3,2,1,4],[0,2,5,2],[5,1,0,5],[1,5,3,0],[3,0,3,3]] or maxclaim:=[[4,2,1,4],[2,2,5,2],[5,1,3,5],[3,5,3,0],[3,2,3,3]]
		or maxclaim:=[[2,0,1,4],[0,1,3,1],[5,0,1,3],[1,2,2,0],[2,0,3,1]]; 
		curr:=[[2,0,1,1],[0,1,2,1],[4,0,0,3],[0,2,1,0],[1,0,3,0]];
		while(i<p){
			running[i]:=1 and count:=count+1 and i:=i+1
		};
		i:=0; 
		while(i<p){
			j:=0; 
			while(j<r){
				alloc[j]:=alloc[j]+curr[i,j] and j:=j+1
			};
			i:=i+1
		};
		i:=0;
		while(i<r){
			avl[i]:=maxres[i]-alloc[i] and i:=i+1     
		};
		flag2:=0;
		while(count!=0){
			if(flag2=0) then{
				safe:=0 and flag1:=0 and i:=0;
				while(i<p){
					if(flag1=0) then{
						if(running[i]) then{
							exec:=1 and flag:=0 and j:=0;
							while(j<r){
								if(flag=0) then{
									if(maxclaim[i,j]-curr[i,j]>avl[j]) then{
										exec:=0 and	flag:=1
									}
									else{
										empty
									}
								}
								else{
									empty
								};
								j:=j+1
							};
							if(exec) then{
								running[i]:=0 and safe:=1 and j:=0;
								while(j<r){
									avl[j]:=avl[j]+curr[i,j] and j:=j+1
								};
								flag1:=1 and order[i]:= 6-count
							}
							else{
								empty
							}
						}
						else{
							empty
						}
					}
					else{
						empty
					};
					i:=i+1
				};
				if(safe=1) then{
					totalsafenum:=totalsafenum+1 //如果能够成功分配，将totalsafenum加1?
				}
				else{
					fail:=1 and flag2:=1
				}
			}
			else{
				empty
			};
			count:=count-1
		}
	}
)
